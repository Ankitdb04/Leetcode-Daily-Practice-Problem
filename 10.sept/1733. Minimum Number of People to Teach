On a social network consisting of m users and some friendships between users, two users can communicate with each other if they know a common language.
You are given an integer n, an array languages, and an array friendships where:
There are n languages numbered 1 through n,
languages[i] is the set of languages the i​​​​​​th​​​​ user knows, and
friendships[i] = [u​​​​​​i​​​, v​​​​​​i] denotes a friendship between the users u​​​​​​​​​​​i​​​​​ and vi.
You can choose one language and teach it to some users so that all friends can communicate with each other. Return the minimum number of users you need to teach.
Note that friendships are not transitive, meaning if x is a friend of y and y is a friend of z, this doesn't guarantee that x is a friend of z.

solution:
import java.util.*;

class Solution {
    public int minimumTeachings(int n, int[][] languages, int[][] friendships) {
        // Step 1: Store languages known by each user in a HashSet for quick lookup
        int m = languages.length; // number of users
        List<Set<Integer>> langs = new ArrayList<>();
        for (int i = 0; i < m; i++) {
            Set<Integer> set = new HashSet<>();
            for (int lang : languages[i]) {
                set.add(lang);
            }
            langs.add(set);
        }

        // Step 2: Identify problematic friendships (where no common language exists)
        Set<Integer> problematicUsers = new HashSet<>();
        for (int[] f : friendships) {
            int u = f[0] - 1; // convert to 0-based index
            int v = f[1] - 1;

            Set<Integer> setU = langs.get(u);
            Set<Integer> setV = langs.get(v);

            boolean hasCommon = false;
            for (int lang : setU) {
                if (setV.contains(lang)) {
                    hasCommon = true;
                    break;
                }
            }
            if (!hasCommon) {
                problematicUsers.add(u);
                problematicUsers.add(v);
            }
        }

        // If no problematic friendship, no need to teach anyone
        if (problematicUsers.isEmpty()) return 0;

        // Step 3: Try teaching each language
        int minTeach = Integer.MAX_VALUE;
        for (int lang = 1; lang <= n; lang++) {
            int countKnows = 0;
            for (int user : problematicUsers) {
                if (langs.get(user).contains(lang)) {
                    countKnows++;
                }
            }
            int needTeach = problematicUsers.size() - countKnows;
            minTeach = Math.min(minTeach, needTeach);
        }

        return minTeach;
    }
}
