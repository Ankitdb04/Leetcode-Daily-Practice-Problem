Given a wordlist, we want to implement a spellchecker that converts a query word into a correct word.
For a given query word, the spell checker handles two categories of spelling mistakes:
Capitalization: If the query matches a word in the wordlist (case-insensitive), then the query word is returned with the same case as the case in the wordlist
In addition, the spell checker operates under the following precedence rules:

When the query exactly matches a word in the wordlist (case-sensitive), you should return the same word back.
When the query matches a word up to capitlization, you should return the first such match in the wordlist.
When the query matches a word up to vowel errors, you should return the first such match in the wordlist.
If the query has no matches in the wordlist, you should return the empty string.
methode 1:
import java.util.*;

public class Solution {
    private static final Set<Character> VOWELS = new HashSet<>(
        Arrays.asList('a','e','i','o','u')
    );

    private String devowel(String s) {
        StringBuilder sb = new StringBuilder();
        for (char c : s.toCharArray()) {
            if (VOWELS.contains(c)) sb.append('*');
            else sb.append(c);
        }
        return sb.toString();
    }

    public String[] spellchecker(String[] wordlist, String[] queries) {
        Set<String> exact = new HashSet<>();
        Map<String, String> caseInsensitive = new HashMap<>();
        Map<String, String> vowelMasked = new HashMap<>();

        for (String w : wordlist) {
            exact.add(w);

            String lower = w.toLowerCase();
            caseInsensitive.putIfAbsent(lower, w);

            String devow = devowel(lower);
            vowelMasked.putIfAbsent(devow, w);
        }

        String[] ans = new String[queries.length];
        for (int i = 0; i < queries.length; ++i) {
            String q = queries[i];

            // 1) exact
            if (exact.contains(q)) {
                ans[i] = q;
                continue;
            }

            // 2) case-insensitive
            String lowerQ = q.toLowerCase();
            if (caseInsensitive.containsKey(lowerQ)) {
                ans[i] = caseInsensitive.get(lowerQ);
                continue;
            }

            // 3) vowel error
            String devowQ = devowel(lowerQ);
            if (vowelMasked.containsKey(devowQ)) {
                ans[i] = vowelMasked.get(devowQ);
                continue;
            }

            // 4) no match
            ans[i] = "";
        }

        return ans;
    }
} 
                              #methode 2#

import java.util.*;

public class Solution {
    private static final boolean[] VOWEL = new boolean[26];
    static {
        for (char c : "aeiou".toCharArray()) {
            VOWEL[c - 'a'] = true;
        }
    }

    private String normalize(String s, boolean maskVowel) {
        char[] arr = s.toLowerCase().toCharArray();
        if (maskVowel) {
            for (int i = 0; i < arr.length; i++) {
                if (VOWEL[arr[i] - 'a']) arr[i] = '*';
            }
        }
        return new String(arr);
    }

    public String[] spellchecker(String[] wordlist, String[] queries) {
        Set<String> exact = new HashSet<>();
        Map<String, String> caseInsensitive = new HashMap<>();
        Map<String, String> vowelMasked = new HashMap<>();

        for (String w : wordlist) {
            exact.add(w);
            String lower = w.toLowerCase();
            caseInsensitive.putIfAbsent(lower, w);
            String mask = normalize(w, true);
            vowelMasked.putIfAbsent(mask, w);
        }

        String[] ans = new String[queries.length];
        for (int i = 0; i < queries.length; i++) {
            String q = queries[i];

            if (exact.contains(q)) {
                ans[i] = q;
                continue;
            }

            String lower = q.toLowerCase();
            if (caseInsensitive.containsKey(lower)) {
                ans[i] = caseInsensitive.get(lower);
                continue;
            }

            String mask = normalize(q, true);
            ans[i] = vowelMasked.getOrDefault(mask, "");
        }
        return ans;
    }
}
