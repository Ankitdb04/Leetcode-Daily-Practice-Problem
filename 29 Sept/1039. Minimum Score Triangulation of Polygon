class Solution {
    public int minScoreTriangulation(int[] A) {
        int n = A.length;
        // dp[i][j] = min cost to triangulate polygon from vertex i to j (inclusive)
        long[][] dp = new long[n][n];

        // initialize to 0 for j <= i+1 (already zero by default)
        // Fill by increasing length (len = j - i)
        for (int len = 2; len < n; len++) { // len = 2 means i..i+2 (a triangle)
            for (int i = 0; i + len < n; i++) {
                int j = i + len;
                long best = Long.MAX_VALUE;
                // choose k between i+1 and j-1
                for (int k = i + 1; k <= j - 1; k++) {
                    long cost = dp[i][k] + dp[k][j] + 1L * A[i] * A[k] * A[j];
                    if (cost < best) best = cost;
                }
                dp[i][j] = (best == Long.MAX_VALUE) ? 0 : best;
            }
        }
        return (int) dp[0][n-1];
    }
}

