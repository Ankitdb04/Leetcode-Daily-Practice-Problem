import java.util.*;

class Solution {
    public int[] avoidFlood(int[] rains) {
        int n = rains.length;
        int[] ans = new int[n];
        TreeSet<Integer> dryDays = new TreeSet<>();
        HashMap<Integer, Integer> fullLakes = new HashMap<>();

        for (int i = 0; i < n; i++) {
            int lake = rains[i];
            if (lake == 0) {
                dryDays.add(i);
                ans[i] = 1; // placeholder, in case we don't need to dry any specific lake
            } else {
                ans[i] = -1;
                if (fullLakes.containsKey(lake)) {
                    // lake already full, need a dry day after previous rain
                    int lastRain = fullLakes.get(lake);
                    Integer dryDay = dryDays.higher(lastRain);
                    if (dryDay == null) {
                        // no dry day available â†’ flood!
                        return new int[0];
                    }
                    ans[dryDay] = lake; // dry this lake
                    dryDays.remove(dryDay);
                }
                fullLakes.put(lake, i);
            }
        }
        return ans;
    }
}
