Given two integers representing the numerator and denominator of a fraction, return the fraction in string format.
If the fractional part is repeating, enclose the repeating part in parentheses.
If multiple answers are possible, return any of them.
It is guaranteed that the length of the answer string is less than 104 for all the given inputs.

Solution:
class Solution {
    public String fractionToDecimal(int numerator, int denominator) {
        if (denominator == 0) {
            return "Error: Division by zero";
        }
        if (numerator == 0) {
            return "0";
        }

        StringBuilder result = new StringBuilder();

        // Determine sign
        if ((numerator < 0) ^ (denominator < 0)) {
            result.append("-");
        }

        long num = Math.abs((long) numerator);
        long den = Math.abs((long) denominator);

        // Integer part
        result.append(num / den);
        long remainder = num % den;

        if (remainder == 0) {
            return result.toString();
        }

        result.append(".");
        Map<Long, Integer> remainderMap = new HashMap<>(); // Remainder -> index in result

        while (remainder != 0 && !remainderMap.containsKey(remainder)) {
            remainderMap.put(remainder, result.length());
            remainder *= 10;
            result.append(remainder / den);
            remainder %= den;
        }

        if (remainder != 0) { // Repeating part found
            int index = remainderMap.get(remainder);
            result.insert(index, "(");
            result.append(")");
        }

        return result.toString();
    }
    
}



